{"version":3,"sources":["webpack:///./src/actions/weather.js","webpack:///./src/components/weatherForm.js","webpack:///./src/components/weatherCard.js","webpack:///./src/pages/index.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["fetchWeatherUpdate","city","country","_ref","regenerator_default","a","mark","_callee","dispatch","apiCall","data","wrap","_context","prev","next","createAction","types","fetch","BASE_API","sent","json","Object","assign","updateDate","moment","format","stop","_x","apply","this","arguments","WeatherForm","state","handleCityChange","e","_this","setState","target","value","handleCountryChange","handleSubmit","preventDefault","props","render","react_default","createElement","onSubmit","className","style","marginLeft","maxWidth","minWidth","onChange","placeholder","React","Component","defaultProps","connect","waitingAnimation","require","errorAnimation","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","Header","weatherData","cod","name","get","src","alt","dist_default","options","height","width","isStopped","isPaused","textAlign","message","weather","layout","seo","title","components_weatherForm","components_weatherCard","m","module","exports","default","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","d","__webpack_exports__","loader","enqueue","createContext","ProdPageRenderer","location","pageResources","InternalPageRenderer","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","content","property","author","concat","siteTitle","background","marginBottom","margin","padding","gatsby_browser_entry","to","color","textDecoration","Layout","children","_856328897","Fragment","header","paddingTop"],"mappings":"2VAIA,IAGaA,EAAqB,SAACC,EAAMC,GAAP,wBAAAC,KAAAC,EAAAC,EAAAC,KAChC,SAAAC,EAAOC,GAAP,IAAAC,EAAAC,EAAA,OAAAN,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACEN,EAASO,YAAaC,IAAbD,IADXH,EAAAE,KAAA,EAEwBG,MAASC,oDAAcjB,EAAlB,IAA0BC,EAA1B,wDAF7B,cAEQO,EAFRG,EAAAO,KAAAP,EAAAE,KAAA,EAGqBL,EAAQW,OAH7B,OAGQV,EAHRE,EAAAO,KAIEX,EAASO,YAAaC,IAAbD,CAAAM,OAAAC,OAAA,GACJZ,EADI,CAEPa,WAAYC,MAASC,OAAO,2BANhC,wBAAAb,EAAAc,SAAAnB,kLADgC,gBAAAoB,GAAA,OAAAxB,EAAAyB,MAAAC,KAAAC,YAAA,eCA5BC,8JACJC,MAAQ,CACN/B,KAAM,GACNC,QAAS,MAGX+B,iBAAmB,SAACC,GAClBC,EAAKC,SAAS,CACZnC,KAAMiC,EAAEG,OAAOC,WAInBC,oBAAsB,SAACL,GACrBC,EAAKC,SAAS,CACZlC,QAASgC,EAAEG,OAAOC,WAItBE,aAAe,SAACN,GACdA,EAAEO,iBACFN,EAAKO,MAAM1C,mBAAmBmC,EAAKH,MAAM/B,KAAMkC,EAAKH,MAAM9B,sHAG5DyC,OAAA,WACE,OACEC,EAAAvC,EAAAwC,cAAA,QACEC,SAAUjB,KAAKW,aACfO,UAAU,MACVC,MAAO,CAAEC,WAAY,EAAGC,SAAU,MAAOC,SAAU,MAEnDP,EAAAvC,EAAAwC,cAAA,SACEO,SAAUvB,KAAKI,iBACfK,MAAOT,KAAKG,MAAM/B,KAClBoD,YAAY,oBAEdT,EAAAvC,EAAAwC,cAAA,SACEO,SAAUvB,KAAKU,oBACfD,MAAOT,KAAKG,MAAM9B,QAClBmD,YAAY,uBAEdT,EAAAvC,EAAAwC,cAAA,iCAxCkBS,IAAMC,WAmDhCxB,EAAYyB,aAAe,CACzBxD,mBAAoB,cAGtB,IAMeyD,cAAQ,KANH,SAAAjD,GAAQ,MAAK,CAC/BR,mBAD+B,SACZC,EAAMC,GACvBM,EAASR,EAAmBC,EAAMC,OAIvBuD,CAA2B1B,+CC7DpC2B,UAAmBC,EAAQ,MAC3BC,EAAiBD,EAAQ,KAEzBE,EAAiB,CACrBC,MAAM,EACNC,UAAU,EACVC,cAAeN,EACfO,iBAAkB,CAChBC,oBAAqB,mBAInBC,EAAS,SAAAhE,GAAqB,IAAlBiE,EAAkBjE,EAAlBiE,YAChB,OAAIA,GAAmC,MAApBA,EAAYC,IAE3BzB,EAAAvC,EAAAwC,cAAA,OAAKE,UAAU,0BACbH,EAAAvC,EAAAwC,cAAA,MAAIG,MAAO,CAAEC,WAAY,KAAzB,0BAC6BmB,EAAYE,KADzC,MACmDC,IAAIH,EAAa,cAAe,KAEnFxB,EAAAvC,EAAAwC,cAAA,OAAKE,UAAU,OACbH,EAAAvC,EAAAwC,cAAA,OAAKE,UAAU,OACbH,EAAAvC,EAAAwC,cAAA,OAAKE,UAAU,aACbH,EAAAvC,EAAAwC,cAAA,UACG0B,IAAIH,EAAa,YAAa,IADjC,OAIAxB,EAAAvC,EAAAwC,cAAA,YAAO0B,IAAIH,EAAa,kBAAmB,MAE7CxB,EAAAvC,EAAAwC,cAAA,OAAKE,UAAU,aACbH,EAAAvC,EAAAwC,cAAA,OACE2B,IAAG,oCAAsCD,IAAIH,EAAa,kBAAmB,IAA1E,UACHK,IAAI,eAEN7B,EAAAvC,EAAAwC,cAAA,YAAO0B,IAAIH,EAAa,yBAA0B,OAGtDxB,EAAAvC,EAAAwC,cAAA,OAAKE,UAAU,OACbH,EAAAvC,EAAAwC,cAAA,OAAKE,UAAU,aACbH,EAAAvC,EAAAwC,cAAA,uBACAD,EAAAvC,EAAAwC,cAAA,UAAK0B,IAAIH,EAAa,aAAc,KACpCxB,EAAAvC,EAAAwC,cAAA,WACAD,EAAAvC,EAAAwC,cAAA,yBACAD,EAAAvC,EAAAwC,cAAA,UAAQ0B,IAAIH,EAAa,gBAAiB,IAA1C,KACAxB,EAAAvC,EAAAwC,cAAA,cAIND,EAAAvC,EAAAwC,cAAA,+BAEED,EAAAvC,EAAAwC,cAAA,QAAMG,MAAO,CAAEC,WAAY,IAAMmB,EAAY7C,cAKjD6C,GAAmC,MAApBA,EAAYC,IAE3BzB,EAAAvC,EAAAwC,cAAA,OAAKE,UAAU,0BACbH,EAAAvC,EAAAwC,cAAC6B,EAAArE,EAAD,CACEsE,QAAOtD,OAAAC,OAAA,GACFuC,EADE,CAELG,cAAeJ,IAEjBgB,OAAQ,IACRC,MAAO,IACPC,WAAW,EACXC,UAAU,IAEZnC,EAAAvC,EAAAwC,cAAA,MAAIG,MAAO,CAAEgC,UAAW,WAAxB,WAA+CZ,EAAYa,SAAW,6BAK1ErC,EAAAvC,EAAAwC,cAAA,OAAKE,UAAU,0BACbH,EAAAvC,EAAAwC,cAAC6B,EAAArE,EAAD,CACEsE,QAASd,EACTe,OAAQ,IACRC,MAAO,IACPC,WAAW,EACXC,UAAU,IAEZnC,EAAAvC,EAAAwC,cAAA,MAAIG,MAAO,CAAEgC,UAAW,WAAxB,+CASNb,EAAOX,aAAe,CACpBY,YAAa,MAGf,IAIeX,cAJI,SAAAzB,GAAK,MAAK,CAC3BoC,YAAapC,EAAMkD,UAGNzB,CAAoBU,GC3EpBV,sBAJI,SAAAzB,GAAK,MAAK,CAC3BkD,QAASlD,EAAMkD,UAGFzB,CAtBG,kBAChBb,EAAAvC,EAAAwC,cAACsC,EAAA,EAAD,KACEvC,EAAAvC,EAAAwC,cAACuC,EAAA,EAAD,CAAKC,MAAM,UACXzC,EAAAvC,EAAAwC,cAAA,OAAKE,UAAU,OACbH,EAAAvC,EAAAwC,cAAA,OAAKE,UAAU,OACbH,EAAAvC,EAAAwC,cAAA,sEAGAD,EAAAvC,EAAAwC,cAACyC,EAAD,OAEF1C,EAAAvC,EAAAwC,cAAA,OAAKE,UAAU,OACbH,EAAAvC,EAAAwC,cAAC0C,EAAD,gCClBR,IAAsBC,EAKpBC,EAAOC,SALaF,EAKW7B,EAAQ,OALR6B,EAAEG,SAAYH,oCCA/C,IAAAI,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAI,EAAAH,EAAA,IAAAI,EAAAJ,EAAAE,EAAAC,GAAAH,EAAAK,EAAAC,EAAA,sBAAAF,EAAA5F,IAAAwF,EAAA,KAAAA,EAAA,IAcyBO,QAAOC,QAEL/C,IAAMgD,cAAc,+KCMhCC,UAjBU,SAAApG,GAAiC,IAA9BqG,EAA8BrG,EAA9BqG,SAAUC,EAAoBtG,EAApBsG,cACpC,OAAKA,EAGEnD,IAAMT,cAAc6D,IAApBrF,OAAAC,OAAA,CACLkF,WACAC,iBACGA,EAAcrF,OALV,uFCKX,SAASuF,EAATxG,GAAiD,IAAlCyG,EAAkCzG,EAAlCyG,YAAaC,EAAqB1G,EAArB0G,KAAMC,EAAe3G,EAAf2G,KAAMzB,EAASlF,EAATkF,MAC9B0B,EADuCC,EAAAtG,KACvCqG,KAcFE,EAAkBL,GAAeG,EAAKG,aAAaN,YAEzD,OACEO,EAAA9G,EAAAwC,cAACuE,EAAA/G,EAAD,CACEgH,eAAgB,CACdR,QAEFxB,MAAOA,EACPiC,cAAa,QAAUP,EAAKG,aAAa7B,MACzCyB,KAAM,CACJ,CACExC,KAAI,cACJiD,QAASN,GAEX,CACEO,SAAQ,WACRD,QAASlC,GAEX,CACEmC,SAAQ,iBACRD,QAASN,GAEX,CACEO,SAAQ,UACRD,QAAO,WAET,CACEjD,KAAI,eACJiD,QAAO,WAET,CACEjD,KAAI,kBACJiD,QAASR,EAAKG,aAAaO,QAE7B,CACEnD,KAAI,gBACJiD,QAASlC,GAEX,CACEf,KAAI,sBACJiD,QAASN,IAEXS,OAAOZ,KAKfH,EAAInD,aAAe,CACjBqD,KAAI,KACJC,KAAM,GACNF,YAAW,IAUED,6WCnFTxC,EAAS,SAAAhE,GAAA,IAAGwH,EAAHxH,EAAGwH,UAAH,OACb/E,EAAAvC,EAAAwC,cAAA,UACEG,MAAO,CACL4E,WAAY,gBACZC,aAAc,YAGhBjF,EAAAvC,EAAAwC,cAAA,OACEG,MAAO,CACL8E,OAAQ,SACR5E,SAAU,IACV6E,QAAS,sBAGXnF,EAAAvC,EAAAwC,cAAA,MAAIG,MAAO,CAAE8E,OAAQ,IACnBlF,EAAAvC,EAAAwC,cAACmF,EAAA,EAAD,CACEC,GAAG,IACHjF,MAAO,CACLkF,MAAO,QACPC,eAAgB,SAGjBR,OAWXxD,EAAOX,aAAe,CACpBmE,UAAW,IAGExD,eCWAiE,IAtCA,SAAAjI,GAAkB,IAAfkI,EAAelI,EAAfkI,SACV3H,EAAI4H,EAAA5H,KAUV,OACEkC,EAAAvC,EAAAwC,cAAAD,EAAAvC,EAAAkI,SAAA,KACE3F,EAAAvC,EAAAwC,cAAC2F,EAAD,CAAQb,UAAWjH,EAAKqG,KAAKG,aAAa7B,QAC1CzC,EAAAvC,EAAAwC,cAAA,OACEG,MAAO,CACL8E,OAAQ,SACR5E,SAAU,IACV6E,QAAS,wBACTU,WAAY,EACZ7D,OAAQ,2BAGVhC,EAAAvC,EAAAwC,cAAA,YAAOwF","file":"component---src-pages-index-js-061bd3b1cffc9aa8e445.js","sourcesContent":["import { createAction } from 'redux-actions'\nimport moment from 'moment'\nimport * as types from './actionTypes'\n\nconst BASE_API = 'http://api.openweathermap.org/data/2.5/weather'\nconst API_KEY = process.env.GATSBY_WEATHER_API_KEY\n\nexport const fetchWeatherUpdate = (city, country) => (\n  async (dispatch) => {\n    dispatch(createAction(types.CLEAR_WEATHER_DATA)())\n    const apiCall = await fetch(`${BASE_API}?q=${city},${country}&appid=${API_KEY}&units=metric`)\n    const data = await apiCall.json()\n    dispatch(createAction(types.FETCH_WEATHER_COMPLETE)({\n      ...data,\n      updateDate: moment().format('DD/MM/YYYY HH:mm:ss'),\n    }))\n  }\n)\n\nexport default fetchWeatherUpdate\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { fetchWeatherUpdate } from '../actions/weather'\nimport './weatherForm.css'\n\n\nclass WeatherForm extends React.Component {\n  state = {\n    city: '',\n    country: '',\n  }\n\n  handleCityChange = (e) => {\n    this.setState({\n      city: e.target.value,\n    })\n  }\n\n  handleCountryChange = (e) => {\n    this.setState({\n      country: e.target.value,\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault()\n    this.props.fetchWeatherUpdate(this.state.city, this.state.country)\n  }\n\n  render() {\n    return (\n      <form\n        onSubmit={this.handleSubmit}\n        className=\"col\"\n        style={{ marginLeft: 0, maxWidth: '30%', minWidth: 320 }}\n      >\n        <input\n          onChange={this.handleCityChange}\n          value={this.state.city}\n          placeholder=\"Enter your city\"\n        />\n        <input\n          onChange={this.handleCountryChange}\n          value={this.state.country}\n          placeholder=\"Enter your country\"\n        />\n        <button>Get Update</button>\n      </form>\n    )\n  }\n}\n\n\nWeatherForm.propTypes = {\n  fetchWeatherUpdate: PropTypes.func,\n}\n\nWeatherForm.defaultProps = {\n  fetchWeatherUpdate: () => {},\n}\n\nconst actionProps = dispatch => ({\n  fetchWeatherUpdate(city, country) {\n    dispatch(fetchWeatherUpdate(city, country))\n  },\n})\n\nexport default connect(null, actionProps)(WeatherForm)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport Lottie from 'react-lottie'\nimport get from 'lodash.get'\nimport './weatherCard.css'\n\nconst waitingAnimation = require('../assets/animations/weather-loading.json')\nconst errorAnimation = require('../assets/animations/weather-error.json')\n\nconst defaultOptions = {\n  loop: true,\n  autoplay: true,\n  animationData: waitingAnimation,\n  rendererSettings: {\n    preserveAspectRatio: 'xMidYMid slice',\n  },\n}\n\nconst Header = ({ weatherData }) => {\n  if (weatherData && weatherData.cod === 200) {\n    return (\n      <div className=\"weather-card-container\">\n        <h5 style={{ marginLeft: 24 }}>\n          {`Weather conditions for ${weatherData.name} - ${get(weatherData, 'sys.country', '')}`}\n        </h5>\n        <div className=\"row\">\n          <div className=\"col\">\n            <div className=\"info-card\">\n              <h1>\n                {get(weatherData, 'main.temp', '')}\n                º C\n              </h1>\n              <span>{get(weatherData, 'weather[0].main', '')}</span>\n            </div>\n            <div className=\"info-card\">\n              <img\n                src={`http://openweathermap.org/img/wn/${get(weatherData, 'weather[0].icon', '')}@2x.png`}\n                alt=\"conditions\"\n              />\n              <span>{get(weatherData, 'weather[0].description', '')}</span>\n            </div>\n          </div>\n          <div className=\"col\">\n            <div className=\"info-card\">\n              <p>Wind speed</p>\n              <h3>{get(weatherData, 'wind.speed', '')}</h3>\n              <br />\n              <p>Air Humidity</p>\n              <h3>{`${get(weatherData, 'main.humidity', '')}%`}</h3>\n              <br />\n            </div>\n          </div>\n        </div>\n        <span>\n          Last updated at:\n          <span style={{ marginLeft: 8 }}>{weatherData.updateDate}</span>\n        </span>\n      </div>\n    )\n  }\n  if (weatherData && weatherData.cod !== 200) {\n    return (\n      <div className=\"weather-card-container\">\n        <Lottie\n          options={{\n            ...defaultOptions,\n            animationData: errorAnimation,\n          }}\n          height={200}\n          width={200}\n          isStopped={false}\n          isPaused={false}\n        />\n        <h5 style={{ textAlign: 'center' }}>{`Error: ${weatherData.message || 'Something went wrong :('}`}</h5>\n      </div>\n    )\n  }\n  return (\n    <div className=\"weather-card-container\">\n      <Lottie\n        options={defaultOptions}\n        height={200}\n        width={200}\n        isStopped={false}\n        isPaused={false}\n      />\n      <h5 style={{ textAlign: 'center' }}>Please enter your location information...</h5>\n    </div>\n  )\n}\n\nHeader.propTypes = {\n  weatherData: PropTypes.object,\n}\n\nHeader.defaultProps = {\n  weatherData: null,\n}\n\nconst stateProps = state => ({\n  weatherData: state.weather,\n})\n\nexport default connect(stateProps)(Header)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport WeatherForm from '../components/weatherForm'\nimport WeatherCard from '../components/weatherCard'\n\nconst IndexPage = () => (\n  <Layout>\n    <SEO title=\"Hello\" />\n    <div className=\"row\">\n      <div className=\"col\">\n        <h3>\n          A unique way to check the current weather of your place.\n        </h3>\n        <WeatherForm />\n      </div>\n      <div className=\"col\">\n        <WeatherCard />\n      </div>\n    </div>\n\n  </Layout>\n)\n\nconst stateProps = state => ({\n  weather: state.weather,\n})\n\nexport default connect(stateProps)(IndexPage)\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport PropTypes from 'prop-types'\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: 'rebeccapurple',\n      marginBottom: '1.45rem',\n    }}\n  >\n    <div\n      style={{\n        margin: '0 auto',\n        maxWidth: 960,\n        padding: '1.45rem 1.0875rem',\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: 'white',\n            textDecoration: 'none',\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: '',\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nimport Header from './header'\nimport './layout.css'\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div\n        style={{\n          margin: '0 auto',\n          maxWidth: 960,\n          padding: '0px 1.0875rem 1.45rem',\n          paddingTop: 0,\n          height: '-webkit-fill-available',\n        }}\n      >\n        <main>{children}</main>\n        {/* <footer>\n          © {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n        </footer> */}\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}